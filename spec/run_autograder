#!/bin/bash
# See http://gradescope-autograders.readthedocs.io/en/latest/specs/

project=10

# Set up paths and filenames
base=$(pwd)
if [ "$VENDOR" == "apple" ]; then
    source="$base"
else
    source="$base/source"
fi
projectdir="$source/nand2tetris/projects/$project"
testsfile="$source/cases.$project"
submission="$base/submission"
resultsdir="$base/results"
resultsfile="$resultsdir/results.json"

# Set up results directory
if [ ! -d $resultsdir ]; then
    mkdir $resultsdir
fi    

# Check submission directory exists
if [ ! -d $submission ]; then
    echo "Submission directory not found."
    echo "If testing interactively, create a subdirectory named 'submission' and place files there."
    echo "If in production, contact the Gradescope admins."
    exit 1
fi

# Copy test files to submission directory
case $project in
    00|01|02|03)
        cp $projectdir/*.tst $submission
        cp $projectdir/*.cmp $submission
        ;;
    05)
        cp $projectdir/*.hack $submission       
        cp $projectdir/*.tst $submission
        cp $projectdir/*.cmp $submission
        ;;
    04|06|07|08|10|11)
        cp -r $projectdir/* $submission
        ;;
esac

# Reorganize submitted files
case $project in
    03)
        mkdir $submission/b
        mv $submission/RAM*K.* $submission/b
        mkdir $resultsdir/b
        ;;
esac

# Determine project type
case $project in
    00|01|02|03|05)
        type=hdl;;
    04) 
        type=asm;;
    06) 
        type=assembler;;
    07|08)
        type=vmtranslator;;
    10)
        type=syntax_analyzer;;
    11)
        type=compiler;;
esac

# Run tests for all listed exercises
case $project in
    00|01|02|03|04|05)
        xargs -n2 -I {} /bin/bash -c " $source/test_$type $project {} {} " < $testsfile;;
    06|10|11)
        xargs -n4 -I {} /bin/bash -c "$source/test_$type {} {} {} {}" < $testsfile;;
    07|08)
        xargs -n5 -I {} /bin/bash -c "$source/test_$type {} {} {} {}" < $testsfile;;
    *)  echo "Test command not specified for project $project"
        exit 1
        ;;
esac

# Produce results.json file
echo "{ \"tests\":" > $resultsfile               
echo "    [" >> $resultsfile
cat $base/results/*.results.json >> "$resultsfile"  # Collate exercise results
cat $base/results/*/*.results.json >> "$resultsfile" 
if [ "$VENDOR" == "apple" ]; then                   # Remove trailing comma
    sed -i '' '$ s/.$//' $resultsfile               # sed is platform-dependent (?!)
else
    sed -i '$ s/.$//' $resultsfile
fi
echo "    ]" >> $resultsfile
echo "}" >> $resultsfile
