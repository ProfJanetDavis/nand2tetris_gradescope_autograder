#!/bin/bash
# Copyright 2019 Janet Davis CC-BY-NC-SA

# Get circuit info
project=$1
test=$2
maxscore=$3

circuit=${test%%-*}

echo $test $circuit $maxscore

# Locate directories and files
base=$(pwd)
if [ $GRADESCOPE_DEV ]; then
    source="$base"
else
    source="$base/source"
fi

tools="$source/nand2tetris/tools/"
simulator="$tools/HardwareSimulator.sh"
score_cpu="$source/score_cpu"

submission="$base/submission"
hdlfile="$submission/$circuit.hdl"
tstfile="$submission/$test.tst" 
cmpfile="$submission/$test.cmp" 

outfile="$submission/$test.out"
stdoutfile="$submission/$test.stdout"
gradefile="$base/results/$test.results.json"

if [ ! -f $hdlfile ]; then
    # Circuit file not found
    score=0
    message="Circuit not submitted"
else 
    # Run tests, redirecting stderr and stdout
    command="$simulator $tstfile &> $stdoutfile"
    eval $command 

    if [ ! -s $stdoutfile ]; then
         # The test did not run.
	    score=0
        message="The test did not run. Contact your instructor for assistance."
    else
	    # If the result file is not empty, parse the results.
	    IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(cat $stdoutfile))'
	    result="${lines[0]}"
        echo $result
	    if [[ "$result" == *success* ]]; then
	        score=$maxscore
	        message="All tests pass!"    
        elif [ -f $outfile ]; then
            possible=`wc -l < $cmpfile`
            (( possible -= 1 ))
            passed=`wc -l < $outfile`
            (( passed -= 1 ))
            if [[ "$result" == *failure* ]]; then
                (( passed -= 1 ))
            fi
            score=0
            message="First $passed out of $possible tests passed."
            if [[ "$result" != *failure* ]]; then
                message="$message\n$result"
            elif [[ $test == CPU ]]; then
                IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(/bin/bash $score_cpu $passed))'
                score="${lines[0]}"
                message="$message ${lines[1]}"
            fi
        else
            score=0
            message="$result"
	    fi
    fi
fi

cat > $gradefile <<EOF
	{
	    "score": $score,
	    "max_score": $maxscore,
	    "number": "$test",
	    "output": "$message"
	},
EOF
